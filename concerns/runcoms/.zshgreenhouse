# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/zoe.blanco/Greenhouse/infrastructure/docker/zookeeper/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/zoe.blanco/Greenhouse/infrastructure/docker/zookeeper/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/zoe.blanco/Greenhouse/infrastructure/docker/zookeeper/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/zoe.blanco/Greenhouse/infrastructure/docker/zookeeper/google-cloud-sdk/completion.zsh.inc'; fi

alias rotate="aws autoscaling terminate-instance-in-auto-scaling-group \
  --no-should-decrement-desired-capacity --instance-id"

function git-pr-create() {
  local reviewer branch branch_items card
  reviewer="${1:-grnhse/cloud-platform}"

  branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  branch_items=($(echo $branch | tr "-" "\n"))
  card="${branch_items[1]}-${branch_items[2]}"

  gh pr create -t "$branch" -b "https://greenhouseio.atlassian.net/browse/$card" -r "$reviewer" "$@"
  gh pr view --web
}

awsp() {
  PROFILES=$(cat ~/.aws/config | \
    ag profile | \
    ag -v sso | \
    awk '{print $2}' | \
    sed 's/]//g' | \
    sort | \
    uniq)
#   PROFILES=$(cat <<EOF
# dev.use1
# sso_support_platform-administration
# dev.use2
# dev.usw2
# prod.apse2
# prod.apse4
# prod.use1
# prod.usw2
# prod.euc1
# prod.euw1
# bastion.use1
# EOF
#   )
  PROFILE=$(echo $PROFILES | fzf)

  export AWS_PROFILE="${PROFILE}"
}


lint() {
    cd "${HOME}/Greenhouse/infrastructure"
    SECONDS=0
    PIDS=()
    docker run --rm -v "$(pwd):/todo" --workdir /todo grnhse/circleci-lint:v2.4.1 required &
    PIDS+=($!)
    docker run --rm -v "$(pwd):/todo" --workdir /todo grnhse/circleci-lint:v2.4.1 optional &
    PIDS+=($!)
    RESULT=0
    for p in "${PIDS[@]}"; do
        if ! wait $p; then
            echo "Failure detected"
            RESULT=1
        fi
    done
    echo "Took: $SECONDS seconds to lint"
    exit $RESULT
}


get-ec2() {
    aws ec2 describe-instances \
        --query "Reservations[*].Instances[*].{PublicIP:PublicIpAddress,Name:Tags[?Key=='Name']|[0].Value,Status:State.Name}" \
        --output table
}

describe-ec2() {
    aws ec2 describe-instances \
        --output table \
        --filters "Name=tag:Name,Values=${1}"
}

rotate_asg_instance_by_id () {
        local _instance_id
        _instance_id="${1}"
        if [ -z "${_instance_id}" ]
        then
                echo "Provide an instance ID" >&2
                return 1
        else
                echo "About to delete instance id: ${_instance_id}..." >&2
                sleep 3
                PAGER=cat aws autoscaling terminate-instance-in-auto-scaling-group --no-should-decrement-desired-capacity --instance-id "${_instance_id}"
        fi
}

rotate_asg_instance_by_hostname () {
        local _instance_dns_name _instance_id
        _instance_dns_name="${1}"
        _instance_id="$(aws ec2 describe-instances --filters Name=instance-state-name,Values=pending,running Name=private-dns-name,Values="${_instance_dns_name}" | jq '.Reservations[].Instances[].InstanceId' -r | head -1)"
        if [ -z "${_instance_id}" ]
        then
                echo "Didn't find any instance ID with private dns name: ${_instance_dns_name}" >&2
                return 1
        else
                echo "About to delete instance id: ${_instance_id}..." >&2
                sleep 3
                PAGER=cat aws autoscaling terminate-instance-in-auto-scaling-group --no-should-decrement-desired-capacity --instance-id "${_instance_id}"
        fi
}

